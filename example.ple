@extends multi_builder.ple

multi_export = { "builder_0":["multi_export"] }
builder_0 ==
# Hack for low-cost ple parser
multi_export = {
    "builder_0": ["multi_export"],
    "builder_1": ["code_before", "code", "code_after", "soluce", "checks_args_stdin", "title", "statement"],
    "builder_2": ["code_before"],
    "builder_3": ["CFLAGS", "LDFLAGS", "LDLIBS"],
    "grader_0": ["code"],
    "grader_1": ["executable_name"],
}
==


subject_code = @copycontent example.c

# input = :wc-code-editor
# input.language = "c"

form==
{{input}}
==

# Create variables for c builder/grader
builder_1 = @extends split.ple

# Add memory tracker
builder_2 = @extends c_alloc_tracker.ple

# Build reference code and test output
builder_3 = @extends c.ple

# Get answer
grader_0 ==
code = input["code"]
==

# Compile
grader_1 = @extends c.ple

# Test
grader_2 = @extends executor.ple

multi_grade_rule = [0,1,9]
