# Requirement
# - code_before
# - code_after
# - soluce
# - checks_args_stdin
# - input (grader only)

sandbox = "python"

builder == #!lang=python
__all__ = ['checks_args_stdin', 'CFLAGS', 'LDFLAGS', 'LDLIBS']

import subprocess
# Build reference code
def build(code, output, cc='gcc', cflags=['-Wall'], ldflags=[], ldlibs=[]):
    return subprocess.run(
        [cc] + cflags + ldflags + ["-x", "c", "-", "-o", output],
        input=code,
        capture_output=True, text=True
    )


if 'CFLAGS' not in globals():
    CFLAGS = ['-Wall']

if 'LDFLAGS' not in globals():
    LDFLAGS = []

if 'LDLIBS' not in globals():
    LDLIBS = []

if 'ignore_stderr' not in globals():
    ignore_stderr = False
if 'use_returncode' not in globals():
    use_returncode = False

ret = build(code_before + soluce + code_after, "profex", cflags=CFLAGS, ldflags=LDFLAGS, ldlibs=LDLIBS)
if ret.returncode != 0:
    raise Exception("c.ple: Reference code cannot be built")

# Complete test cases with expected output
for test in checks_args_stdin:
    name, args, input = test[:3]
    expected_output = test[3] if len(test) > 3 else None
    expected_returncode = test[4] if len(test) > 4 else 0

    ret = subprocess.run(["./profex"] + args, input=input, capture_output=True, text=True)

    output = ret.stdout + ret.stderr if not ignore_stderr else ret.stdout

    if ret.returncode != expected_returncode:
        raise Exception("Reference code cannot run on test `%s`" % name)

    if expected_output is None:
        test.append(output)
    elif expected_output != output:
        raise Exception("Reference code doesn't produce expected result on test `%s`" % name)
==

grader == #!lang=python
__all__ = ['executable_name']

# Build submission
import subprocess

def build(code, output, cc='gcc', cflags=['-Wall'], ldflags=[], ldlibs=[]):
    return subprocess.run(
        [cc] + cflags + ldflags + ["-x", "c", "-", "-o", output],
        input=code,
        capture_output=True, text=True
    )

executable_name = None
ret = build(code_before + code + code_after, "studex", cflags=CFLAGS, ldflags=LDFLAGS, ldlibs=LDLIBS)
if ret.returncode != 0:
    grade = 0
    feedback = {
        'type': 'error',
        'content': 'Le code ne compile pas :\n%s\n' % (ret.stdout + ret.stderr)
    }
else:
    if ret.stdout:
        grade = 90
        feedback = {
            'type': 'warning',
            'content': 'Le code provoque ne semble pas propre :\n%s\n' % (ret.stdout + ret.stderr)
        }
    else:
        grade = 100
        feedback = {
            'type': 'success',
            'content': 'Le code compile proprement.\n'
        }
    executable_name = "./studex"
==
