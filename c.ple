# Requirement
# - code_before
# - code_after
# - soluce
# - checks_args_stdin
# - input (grader only)

builder ==
__all__ = ['checks_args_stdin', 'CFLAGS', 'LDFLAGS', 'LDLIBS']

import subprocess
# Build reference code
def build(code, output, cc='gcc', cflags=['-Wall'], ldflags=[], ldlibs=[]):
    return subprocess.run(
        [cc] + cflags + ldflags + ["-x", "c", "-", "-o", output], 
        input=code,
        capture_output=True, text=True
    )


if 'CFLAGS' not in globals():
    CFLAGS = ['-Wall']

if 'LDFLAGS' not in globals():
    LDFLAGS = []

if 'LDLIBS' not in globals():
    LDLIBS = []

ret = build(code_before + soluce + code_after, "profex", cflags=CFLAGS, ldflags=LDFLAGS, ldlibs=LDLIBS)
if ret.returncode != 0:
    raise Exception("Reference code cannot be built")

# Complete test cases with expected output
for test in checks_args_stdin:
    name, args, input = test[:3]
    ret = subprocess.run(["./profex"] + args, input=input, capture_output=True, text=True)
    if ret.returncode != 0:
        raise Exception("Reference code cannot run on test `%s`" % name)
    if len(test) > 3 and test[3] != ret.stdout + ret.stderr:
        raise Exception("Reference code doesn't produce expected result on test `%s`" % name)
    test.append(ret.stdout + ret.stderr)
==

grader ==
__all__ = ['grade', 'feedback', 'executable_name']

# Build submission
import subprocess

def build(code, output, cc='gcc', cflags=['-Wall'], ldflags=[], ldlibs=[]):
    return subprocess.run(
        [cc] + cflags + ldflags + ["-x", "c", "-", "-o", output], 
        input=code,
        capture_output=True, text=True
    )

ret = build(code_before + input + code_after, "studex", cflags=CFLAGS, ldflags=LDFLAGS, ldlibs=LDLIBS)
if ret.returncode != 0:
    grade = 0
    feedback.append({
        'type': 'error',
        'content': 'Le code ne compile pas :\n%s\n' % (ret.stdout + ret.stderr)
    })
else:
    if ret.stdout:
        grade *= 0.9
        feedback.append({
            'type': 'warning',
            'content': 'Le code provoque ne semble pas propre :\n%s\n' % (ret.stdout + ret.stderr)
        })
    else:
        feedback.append({
            'type': 'success',
            'content': 'Le code compile proprement.\n'
        })
    executable_name = "./studex"
==