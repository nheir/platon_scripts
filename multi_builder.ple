## Example of usage:
#
# @extends /path/of/this.ple
#
## Define globals that each builder/grader may set (as value, a global list/dict may be modified from any script)
## Note: grade/feedback are exported from each grader
# multi_export = {
#     "builder_1": ["code_before", "code", "code_after", "soluce", "checks_args_stdin", "title", "statement"],
#     "builder_2": ["CFLAGS", "LDFLAGS", "LDLIBS", "checks_args_stdin"],
#     "grader_0": ["executable_name"],
# }
#
## Create variables for c builder/grader
# builder_1 = @extends split.ple
#
## Build reference code and test output
# builder_2 = @extends c.ple
#
## Compile
# grader_0 = @extends c.ple
#
## Test
# grader_1 = @extends executor.ple

## Final feedback is an array of all feedbacks
## Grade is computed according to a rule by ignoring undefined / grade
## - "last": take last grader's grade (default)
## - "prod": take the product of all grades
## - "avg": take the average of all grades
## - "min"/"max": take the min/max of all grades
## - weighted: take the weighted sum of all grades
## multi_grade_rule = "last"
# multi_grade_rule = [1, 9]
#
## TODO: function object ?

sandbox = "python"

builder == #!lang=python
if 'multi_export' not in globals():
    multi_export = {}

def run_builders():
    env = globals()

    builders = [ k for k in globals() if k.startswith("builder_") and k[8:].isdigit()]
    builders.sort()

    for k in builders:
        local_env = dict(env)
        v = globals()[k]
        # If comming from a @extends .ple
        if isinstance(v, dict) and 'builder' in v:
            source = v['builder']
        elif isinstance(v, str):
            source = v
        else:
            raise Exception("builder from %s is missing" % k)

        bytecode = compile(source, k, "exec")
        exec(bytecode, local_env)

        keys = []
        if k in multi_export:
            keys = multi_export[k]
        elif '__all__' in local_env:
            keys = local_env['__all__']
        for k in keys:
            if k in local_env:
                env[k] = local_env[k]

run_builders()
del run_builders
==

multi_grade_rule = "last"

grader == #!lang=python
if 'multi_export' not in globals():
    multi_export = {}

# grade & feedback must be globals
grade = -1
feedback = []

if multi_grade_rule not in ['last', 'prod', 'avg', 'min', 'max'] and not isinstance(multi_grade_rule, list):
    multi_grade_rule = 'last'

def run_graders():
    env = globals()

    graders = [ k for k in globals() if k.startswith("grader_")]
    graders.sort()

    grades = []

    for k in graders:
        local_env = dict(env)
        local_env['grade'] = None
        local_env['feedback'] = None

        v = globals()[k]
        # If comming from a @extends .ple
        if isinstance(v, dict) and 'grader' in v:
            source = v['grader']
        elif isinstance(v, str):
            source = v
        else:
            raise Exception("grader from %s is missing" % k)

        bytecode = compile(source, k, "exec")
        exec(bytecode, local_env)

        keys = []
        if k in multi_export:
            keys = multi_export[k]
        elif '__all__' in local_env:
            keys = local_env['__all__']
        for k in keys:
            if k in local_env:
                env[k] = local_env[k]

        # Add the feedback (array or object)
        if isinstance(local_env['feedback'], list):
            env['feedback'] += local_env['feedback']
        elif isinstance(local_env['feedback'], dict):
            env['feedback'] += [local_env['feedback']]

        # Stop grader when a grader fails
        if local_env['grade'] is not None and local_env['grade'] < 0:
            env['grade'] = -1
            return

        grades.append(local_env['grade'])

    # Compute grade
    if multi_grade_rule == "prod":
        env['grade'] = 100
        for g in grades:
            if g is not None:
                env['grade'] *= g / 100
    elif multi_grade_rule == 'last':
        env['grade'] = 100;
        for g in grades:
            if g is not None:
                env['grade'] = g
    elif multi_grade_rule == 'min':
        env['grade'] = min((g for g in grades if g is not None), default=100)
    elif multi_grade_rule == 'max':
        env['grade'] = max((g for g in grades if g is not None), default=0)
    else:
        if multi_grade_rule == 'avg':
            weights = [1] * len(graders)
        else:
            weights = [w for w in multi_grade_rule]

        env['grade'] = 0
        total = 0
        for g, w in zip(grades, weights):
            if g is not None:
                env['grade'] += g * w
                total += w
        if total > 0:
            env['grade'] = env['grade'] / total

run_graders()
del run_graders
==
